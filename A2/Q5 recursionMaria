;tribonacci series - 0 0 1 1 2 4 7 13...
(setq first 0)
(setq second 0)
(setq third 1)
(let ((list '(0 0 1))))

;(concatenate 'string "hello" "world")
(defun tri(n)
    (cond
        ((= n 0) (print '()))
        ((= n 1) (print first))
        ((= n 2) (print (concatenate 'string "0 " "0")))
        ((= n 3) (print (concatenate 'string "0 " "0 " "1")))
        (t(helper2 n))
     )
 )

(defun helper(n)
        (setq size (- n 4))
        (print first)(print second)(print third)
        (loop for x from 0 to size
            do( setq fourth (+ first second third))( print fourth)
            do( setq first second)
            do( setq second third)
            do( setq third fourth)
        )
)

(defun helper2(n)
   ; (defun consList (lambda ()( ( cons (helper2 (- n 1)) (list))
                             ;   ( cons (helper2 (- n 2)) (list))
                              ;  ( cons (helper2 (- n 3)) (list))
                               ; ( cons (+ (helper2(- n 1)) (helper2(- n 2)) (helper2(- n 3))) (list))
                             ;  );end of lambda body
                          ;  );end of lambda
       ; )
    (cond
        ( (= n 3) 1)
        ( (< n 3) 0)
        ( (> n 3)( (lambda () (cons (helper2 (- n 3)) (list))
                              (cons (helper2 (- n 2)) (list))
                              (cons (helper2 (- n 1)) (list))
                              (cons (+ (helper2(- n 1)) (helper2(- n 2)) (helper2(- n 3))) (list))
                           
                           
                                )
                  ; ( (cons (helper2 (- n 2)) (list))) 
                  ; (lambda () (cons (helper2 (- n 2)) (list)))
                  ; (lambda () (cons (helper2 (- n 1)) (list)))
                 ;  (lambda () (cons (+ (helper2(- n 1)) (helper2(- n 2)) (helper2(- n 3))) (list)))
                  
                  );end of return statement of the if 
         );if statement
        ;(t ( )  )  
     );cond
 )

(print (helper2 4))
