(defun binary-search (list)
    (cond
        ((null list) '(TreeNull))
        (( < (list-length list) 2) '(NotaBST_length))
        (( > (car (inorder (left-subtree list))) (car list)) '(left) )
        (( < (car (inorder (right-subtree list))) (car list)) '(right) )
        (t)
     ) 
)

(defun inorder(list)
    (cond
        ((null list) '())
        ((< (list-length list) 2) '(lstLength))     
        (t ( append  (inorder (left-subtree list)) (list (car list)) (inorder (right-subtree list)) ) )       
    )
)

(defun left-subtree(list)
    (cond
        ((null list) nil)
        (t (car (cdr list)))
    )
)

(defun right-subtree(list)
    (cond
        ((null list) nil)
        (t (car (cdr (cdr list))))
    )  
)

(print (binary-search '(8 (3 (1 () ()) (6 (4 () ())(7 () ()))) (10 () (14 (13 () ()) ())))))   
