(defun inorder(list)
    (cond
        ((null list) '())
        ((< (list-length list) 2) '(NotaBST))
        (t ( append  (inorder (left-subtree list)) (list (car list)) (inorder (right-subtree list)) ) )    
    )
)

(defun preorder(list)
    (cond
        ((null list) '())
        ((< (list-length list) 2) '(preNotaBST))
        ( t (cons (car list) (append (preorder (left-subtree list)) (preorder(right-subtree list))) ) )
    )
)

(defun left-subtree(list)
    (cond
        ((null list) nil)
        (t (car (cdr list)))
    )
)

(defun right-subtree(list)
    (cond
        ((null list) nil)
        (t (car (cdr (cdr list))))
     )
)

(setq list1 '(8 (3 (1 () ()) (6 (4 () ())(7 () ())))))
(setq list2 '(+ (- (1 () ()) (* (4 () ())(7 () ()))) (/ (7 () ()) (6 () ()))) )
(print (inorder list2 ))
(print (preorder list2))
