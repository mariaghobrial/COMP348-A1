(defun sub-list (list from  &optional (to NIL))
    (cond
       ( (null list)  '()) 
       ((null to) (sub-list list from (list-length list)))
       ((> from 1) (sub-list (cdr list) (1- from) (1- to)))
       ((or (< from 0)(> to (list-length list)) (> from (list-length list)) (> from to) (= from 0)) '()) 

        (t( cons (car list) (sub-list (cdr list) from (1- to))))
    );end of cond
);defun
           

(print (sub-list '(1 4 10) 2 3))
(print (sub-list '(1 4 10) 2))
(print (sub-list '(1 7 12) 1 4))
(print (sub-list '(1 7 12) 0 1))
(print (sub-list '(1 6 12) 4 2))
(print (sub-list '(1 6 12)))
