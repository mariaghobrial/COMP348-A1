(defun sub-list3 (list from &optional (to NIL))
    (cond
       ((null list)  '()) 
       ((null to) (sub-list3 list from (list-length list)))
       ((= to from) (list (car list)))
       ((> from to) (rev (sub-list3 list to from)))
       ((= from 0) (sub-list3 list 1 to))
       ((> from 1) (sub-list3 (cdr list) (1- from) (1- to)))
       ((> to (list-length list)) (sub-list3 list from 3))
       ((or (< from 0) (> from (list-length list))) '())
       (t(cons (car list) (sub-list3 (cdr list) from (1- to))))
    ) ;cond
);defun

(defun rev (lst)
    (cond
        ((null lst) '())
        (t(append (rev(cdr lst)) (list (car lst))))
     )
 )

(print (sub-list3 '(1 4 10) 2 3))
(print (sub-list3 '(10 1) 2))
(print (sub-list3 '(1 7 12) 4 0))
(print (sub-list2 '(1 6 12)))
