#include<stdio.h>

typedef enum { CHAR, LIST } tType;

typedef struct node {
    tType type;
    union t {
        char data;
        struct list* l; //or struct listnode
    }t;
    struct node* next;
}node;

typedef struct listnode {
    //assume that the list only has char datatype and not another list
    char datalist;
    struct node* next;
} *list;


node* createLinkedList(int size);
void printNode(node* head);


int main()
{
    int size = 0;
    // char a="";
    node* HEAD = NULL;
    printf("Number of nodes is: ");
    scanf("%d", &size);
    HEAD = createLinkedList(size);
    printNode(HEAD);
    return 0;

}

node* createLinkedList(int size) {
    node* head = NULL;
    node* temp = NULL;
    node* p = NULL;

    for (int i = 0; i < size;i++) {
        temp = (node*)malloc(sizeof(node)); //create node
        printf("what is the data of this node:", i + 1);
        // scanf ("%d",&(temp->t.data)); //temp.data
        scanf_s("%d", &(temp->t));

        if (temp->type == LIST) {
            int size = 0;
            printf("size of the 2nd linked list : ");
            scanf_s("%d", &size);
            *createLinkedList(size);

        }
        else if (temp->type == CHAR) {
            temp->next = NULL;

            if (head == NULL) {
                head = temp;

            }
            else {
                p = head;
                while (p->next != NULL) {
                    p = p->next;

                }
                p->next = temp;

            }
        }
    }
    return head;
}

void printNode(node* head) {
    node* p = head;

    while (p->next != NULL) {
        printf("\t%d", p->t); //?????
        p = p->next;

    }

}
