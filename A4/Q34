using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;


namespace A4Q3
{
    // Creating a custome event , to set the current line read from file to LineRead .
    public class MyEventArgs : EventArgs
    {
        public string LineRead { get; set; }
    }

    // Please note that static classes are already sealed since no class can inherit from static class.
    static class TextFileProcessor
    {

        public delegate void CustomeDelegate(string message);
        // a static event is used to raise event in static sealed class using a custome delegate.(since its needs string parameter)
        public static event CustomeDelegate LineRead;

        // below method raises event.
        public static void RaiseEvent(string message)
        {
            if (LineRead != null) LineRead(message);
        }

        public static String[] Read(string path)
        {
            string readText = File.ReadAllText(path);
            string[] lines = readText.Split('\n');
            Console.WriteLine("Nr. Of lines in file: " + lines.Length);
            foreach (string s in lines)
            {
                //Console.WriteLine(s);
                RaiseEvent(s);

            }
            return lines;
        }
    }
    class main
    {
        static void currentMessageFromFile(string message)
        {
            Console.WriteLine("Line Read from file is: {0}", message);
        }
        static void Main()
        {
            List<double> doublearr = new List<double>();
            List<double> doubleper = new List<double>();
            TextFileProcessor.LineRead += new TextFileProcessor.CustomeDelegate(currentMessageFromFile);
            string[] lines = TextFileProcessor.Read("abc.txt");
            foreach (string line in lines)
            {
                string[] words = line.Split(',');
                if (words[0].Equals("Rectangle"))
                {
                    double area = Convert.ToDouble(words[1]) * Convert.ToDouble(words[2]);
                    double per = Convert.ToDouble(words[1]) + Convert.ToDouble(words[2]);
                    doublearr.Add(area);
                    doubleper.Add(per);
                }
                if (words[0].Equals("Circle"))
                {
                    double area = Math.PI * Convert.ToDouble(words[1])*Convert.ToDouble(words[1]);
                    double per = 2 * Math.PI * Convert.ToDouble(words[1]);
                    doublearr.Add(area);
                    doubleper.Add(per);
                }
            }

            var output =
                from area in doublearr
                orderby area
                select area;

            Console.WriteLine("\nsorting by area:");
            foreach (var s in output)
            {
                Console.Write(s + ", ");
            }

            var output2 =
                from per in doubleper
                orderby per
                select per;

            Console.WriteLine("\n\nsorting by perimeter:");
            foreach (var s in output2)
            {
                Console.Write(s + ", ");
            }
            //int i = 0;

            var group = from line in lines
                        from word in line.Split(',')
                        group line by line[0] into newGroup
                        select newGroup;

            double careaavg = 0;
            double cperavg = 0;
            int ccount = 0;
            double rareaavg = 0;
            double rperavg = 0;
            int rcount = 0;
            int shapecount = lines.Length;
            

            foreach (var g in group)
            {
                foreach (var x in g)
                {
                    
                    if (x.Contains("Circle"))
                    {
                        string[] arr=x.Split(',');
                        careaavg += Math.PI * Convert.ToDouble(arr[1])* Convert.ToDouble(arr[1]);
                        cperavg += 2 * Math.PI * Convert.ToDouble(arr[1]);
                        ccount++;
                    }
                    else if (x.Contains("Rectangle"))
                    {
                        string[] arr2= x.Split(',');
                        rareaavg += Convert.ToDouble(arr2[1]) * Convert.ToDouble(arr2[2]);
                        rperavg += Convert.ToDouble(arr2[1]) + Convert.ToDouble(arr2[2]);
                        rcount++;
                    }
                }
            }
            

            careaavg = careaavg / ccount;
            cperavg= cperavg / ccount;
            rareaavg = rareaavg / rcount;
            rperavg = rperavg / rcount;

            Console.WriteLine($"\n\nCircle Area Average: {careaavg}");
            Console.WriteLine($"Circle Perimeter Average: {cperavg}");
            Console.WriteLine($"Rectangle Area Average: {rareaavg}");
            Console.WriteLine($"Rectangle Perimeter Average:  {rperavg}");
            Console.WriteLine($"Total number of shapes in the file: {shapecount}");

        }
    }

}
