using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace A4Q3
{
    public class CustomEventArgs : EventArgs
    {
        public string LineRead { get; set; }
    }

    static class TextFileProcessor
    {
        public delegate void CustomDelegate(string message);
        public static event CustomDelegate LineRead;


        public static void RaiseEvent(string message)
        {
            if (LineRead != null) LineRead(message);
        }

        public static String[] Read(string path)
        {
            string readText = File.ReadAllText(path);
            string[] lines = readText.Split('\n');
            foreach (string s in lines)
            {
                RaiseEvent(s);
            }
            return lines;
        }
    }
    
    class main
    {
        static void current(string message)
        {
            Console.WriteLine($"Reading line: {message}");
        }
        static void Main()
        {
            TextFileProcessor.LineRead += new TextFileProcessor.CustomDelegate(current);
            string[] lines = TextFileProcessor.Read("abc.txt");
            
            //Q4
            List<double> doublearr = new List<double>();
            List<double> doubleper = new List<double>();
            foreach (string line in lines)
            {
                string[] words = line.Split(',');
                if (words[0].Equals("Rectangle"))
                {
                    double area = Convert.ToDouble(words[1]) * Convert.ToDouble(words[2]);
                    double per = Convert.ToDouble(words[1]) + Convert.ToDouble(words[2]);
                    doublearr.Add(area);
                    doubleper.Add(per);
                }
                if (words[0].Equals("Circle"))
                {
                    double area = Math.PI * Convert.ToDouble(words[1]) * Convert.ToDouble(words[1]);
                    double per = 2 * Math.PI * Convert.ToDouble(words[1]);
                    doublearr.Add(area);
                    doubleper.Add(per);
                }
            }

            var output =
                    from area in doublearr
                    orderby area
                    select area;

            Console.WriteLine("\nsorting by area:");
            foreach (var s in output)
            {
                Console.Write(s + ", ");
            }

            var output2 =
                from per in doubleper
                orderby per
                select per;

            Console.WriteLine("\n\nsorting by perimeter:");
            foreach (var s in output2)
            {
                Console.Write(s + ", ");
            }

            var group = from line in lines
                        from word in line.Split(',')
                        group line by line[0] into newGroup
                        select newGroup;

            double careaavg = 0;
            double cperavg = 0;
            int ccount = 0;
            double rareaavg = 0;
            double rperavg = 0;
            int rcount = 0;
            int shapecount = lines.Length;
            int nmbofshapes=0;

            foreach (var g in group)
            {
                foreach (var x in g)
                {
                    if (x.Contains("Circle"))
                    {
                        string[] arr = x.Split(',');
                        careaavg += Math.PI * Convert.ToDouble(arr[1]) * Convert.ToDouble(arr[1]);
                        cperavg += 2 * Math.PI * Convert.ToDouble(arr[1]);
                        ccount++;
                    }
                    else if (x.Contains("Rectangle"))
                    {
                        string[] arr2 = x.Split(',');
                        rareaavg += Convert.ToDouble(arr2[1]) * Convert.ToDouble(arr2[2]);
                        rperavg += Convert.ToDouble(arr2[1]) + Convert.ToDouble(arr2[2]);
                        rcount++;
                    }
                }
               nmbofshapes++; 
            }

            careaavg = careaavg / ccount;
            cperavg = cperavg / ccount;
            rareaavg = rareaavg / rcount;
            rperavg = rperavg / rcount;

            Console.WriteLine($"\n\nCircle Area Average: {careaavg}");
            Console.WriteLine($"Circle Perimeter Average: {cperavg}");
            Console.WriteLine($"Rectangle Area Average: {rareaavg}");
            Console.WriteLine($"Rectangle Perimeter Average:  {rperavg}");
            Console.WriteLine($"Total number of shapes in the file: {shapecount}");
            Console.WriteLine($"Total number of types of shapes in the file: {nmbofshapes}");
        }
    }

}
