import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Scanner;

public class testingQ1 {
    public static void main(String args[]){
        Scanner userInput = new Scanner(System.in);
        String choice="shapes";
        String value="";
        String strArr[]=null;
        ArrayList<Shape>shapes= new ArrayList<Shape>();

        Scanner inputStream = null;
        File f1 = new File(choice);
        try {
            if (f1.exists())
                inputStream = new Scanner(new FileInputStream(f1));
        } catch (FileNotFoundException e) {
            System.out.println("Could not open file");
            try {
                inputStream.close();//gives null pointer exception
            } catch (NullPointerException u) {
            }
            System.exit(0);
        }

        int maxlengthCircle= 2;
        int maxlengthRect=3;
        while (inputStream.hasNext()){
            value=inputStream.nextLine();
            strArr=value.split(",");

                if (strArr[0].equalsIgnoreCase("Circle")){
                    if (strArr.length == maxlengthCircle) {
                        String rad= strArr[1];
                        Circle c= new Circle(Double.parseDouble(rad));
                        shapes.add(c);

                    }else{ //if circle has more than 1 parameter or has less than 1 parameter
                        System.out.println("Invalid parameters or missing parameters for Circle!");
                        System.exit(0);
                    }

                }else if (strArr[0].equalsIgnoreCase("Rectangle")){
                    if (strArr.length == maxlengthRect){
                        String s1= strArr[1];
                        String s2= strArr[2];
                        Rectangle r= new Rectangle(Double.parseDouble(s1),Double.parseDouble(s2));
                        shapes.add(r);

                    }else{ //if rectangle has more than 2 parameters or has less than 1 parameter
                        System.out.println("Invalid parameters or missing parameters for Rectangle!");
                        System.exit(0);

                    }

                }else{
                    System.out.println("INVALID SHAPE! MUST BE CIRCLE OR RECTANGLE!");
                    System.exit(0);
                }


        }

        // Compare shape objects, Sort shape by name and area
        Collections.sort(shapes, new Comparator<Shape>() {
            public int compare(Shape shape1, Shape shape2) {
                if (shape1.getName().compareTo(shape2.getName()) > 0) {
                    return 1;
                } else if (shape1.getName().compareTo(shape2.getName()) < 0) {
                    return -1;
                } else {
                    if (shape1.getArea() > shape2.getArea()) {
                        return 1;
                    } else if (shape1.getArea() < shape2.getArea()) {
                        return -1;
                    }
                    return 0;

                }
            }
        });
        //printing
        for (Shape shape: shapes){
            Printable p= (Printable) shape;
            p.print();
        }





    }





}
